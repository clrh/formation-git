Créer des branches et les manipuler

@1/ Lister les branches locales
> git branch

@2/ Créer une branche "test" à partir de la branche master
> git branch test

@3/ Se positionner sur la branche "test"
> git checkout test
Note: 2 et 3 peuvent se combiner en une commande
> git checkout -b test master
Voir: option -a et -v

@4/ Lister l'état de toutes les branches
> git branch -v
> git show-branch

@5/ Créer un nouveau commit dans la branche "test" puis comparer la branche test avec la branche master
> git show-branch test master

@6/ Créer une branche "wip" à partir de master pour développer une idée puis créer un ou plusieurs commits
> git checkout -b wip master
> git add / commit

@7/ Faire évoluer master de 1 commit
> git checkout master
> git add / commit

@8/ On souhaite livrer wip sur master, faire un merge
> git checkout master
> git merge wip

@9/ Gestion de conflit: sur la branche wip, modifier un file2, le commiter, sur la branche master, modifier file2, le commiter, sur master faire un cherry-pick du commit de wip
> git checkout wip
> vim file2 / git add / git commit / git log -1
> git checkout master
> vim file2 / git add / git commit
> git cherry-pick <idcommit>

@10/ explorons ensemble la commande git rebase -i
Travailler sur les 3 derniers commits
> git rebase -i HEAD~3
Option reword
Option edit
Option squash
etc.

@11/ Commencer une nouvelle modification sur le fichier "file", l'interrompre en mettant de côté les changements
> git stash save "test"
> git stash list
> git stash pop
